{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "bf95406f-323e-41a3-8371-966f0dab84ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sport:\n",
    "    def __init__(self,name,players):\n",
    "        self.name=name\n",
    "        self.players=players"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "fcf0b099-19af-4c5a-9a08-35c7618f060e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'축구'"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Sport:\n",
    "    def __init__(self, name, players):\n",
    "        self.name= name\n",
    "        self.players = players\n",
    "soccer = Sport(\"축구\", 11)    \n",
    "soccer.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "864fdc74-80f6-48c1-ba7c-dc00d722b815",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sport:\n",
    "    def __init__(self,name,players):\n",
    "        self.name= name\n",
    "        self.players = players\n",
    "    def explain(self):\n",
    "        print(f'{self.name}은 {self.players}명이서 하는 게임입니다.') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2defaec4-a0e7-44d4-b9d9-dc0241ab2567",
   "metadata": {},
   "outputs": [],
   "source": [
    "class plant:\n",
    "    def __init__(self,name):\n",
    "        self.name=name\n",
    "        \n",
    "    def color(self):\n",
    "        self.color=\"green\"\n",
    "        return self.color"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f8abcd26-17b7-43e4-b483-6edeb63ad52e",
   "metadata": {},
   "source": [
    "소나무=Plant(\"소나무\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2cf6c1ea-f50c-4a9f-bd2a-3fe30d84d933",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name '소나무' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [47]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43m소나무\u001b[49m\u001b[38;5;241m.\u001b[39mcolor()\n",
      "\u001b[1;31mNameError\u001b[0m: name '소나무' is not defined"
     ]
    }
   ],
   "source": [
    "소나무.color()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "0308dce3-56f7-492d-accd-7b904b5888a4",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3079053578.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [81]\u001b[1;36m\u001b[0m\n\u001b[1;33m    Class Apple(Plant):\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Class Apple(Plant):\n",
    "    def color(self):\n",
    "        self.color=\"red\"\n",
    "        return self.color"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7c8437ea-7dbe-4663-b981-e7a46ceb407e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1302830797.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [52]\u001b[1;36m\u001b[0m\n\u001b[1;33m    Class Apple(Plant):\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Class Apple(Plant):\n",
    "    def color(self):\n",
    "        self.color='red'\n",
    "        return self.color"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "61401418-2935-4a0b-8739-56a32c9c48a3",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Plant' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [53]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mApple\u001b[39;00m(\u001b[43mPlant\u001b[49m):\n\u001b[0;32m      2\u001b[0m   \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcolor\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m      3\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolor \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRed\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Plant' is not defined"
     ]
    }
   ],
   "source": [
    "class Apple(Plant):\n",
    "  def color(self):\n",
    "    self.color = 'Red'\n",
    "    return self.color "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1953b140-b389-4628-9715-465b2bf19b19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "f=open(\"new.txt\",\"w\")\n",
    "for i in range(10):\n",
    "    f.write(f\"hello\\n\")\n",
    "with open(\"new.txt\",\"w\") as f:\n",
    "    \n",
    "    print(data,end=\"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "073748d1-aa36-4b73-96ab-88230034983c",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (446460173.py, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [61]\u001b[1;36m\u001b[0m\n\u001b[1;33m    data=\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "with open(\"new.txt\",\"w\",encording='utf-8') as f:\n",
    "    for i in range(10):\n",
    "        f.write('hello\\n')\n",
    "        \n",
    "with open(\"new.txt\",\"r\",encording='utf-8') as f:\n",
    "    data=\n",
    "    f.read()\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "e863764c-ce5c-4cf2-b296-b6dec1a6b774",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['hello \\n', 'hello \\n', 'hello \\n', 'hello \\n', 'hello \\n', 'hello \\n', 'hello \\n', 'hello \\n', 'hello \\n', 'hello \\n']\n"
     ]
    }
   ],
   "source": [
    "f = open(\"new.txt\", 'w')\n",
    "for i in range(10):\n",
    "    f.write(f\"hello \\n\")\n",
    "f.close() \n",
    "\n",
    "f= open ('new.txt', 'r')\n",
    "data =f.readlines()\n",
    "print(data)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "98448438-9535-4c5e-ab7c-aaafbf13ae0b",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (3140437571.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [68]\u001b[1;36m\u001b[0m\n\u001b[1;33m    with open (\"new.txt\",'r') as f:\u001b[0m\n\u001b[1;37m                                   ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "with open (\"new.txt\",'r') as f:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "dd7f4b8f-075f-41d5-83a8-8a2df019e6ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Calculator:\n",
    "    def __init__(self):\n",
    "        self.result=0\n",
    "    \n",
    "    def multifly(self,num):\n",
    "        self.result*=num\n",
    "        return self.result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "4535cf2f-9213-4999-ab62-ce82d184b37e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pos' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [72]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mpos\u001b[49m\u001b[38;5;241m.\u001b[39mmultifly(\u001b[38;5;241m2\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'pos' is not defined"
     ]
    }
   ],
   "source": [
    "pos.multifly(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a37aada-415a-4aa0-be0b-0716c3f60056",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FourCal:\n",
    "    def setdata(self,a,b):       \n",
    "        self.first=a\n",
    "        self.second=b\n",
    "        \n",
    "    def add(self):\n",
    "        self.result=self.first+self.second\n",
    "        return self.result\n",
    "    \n",
    "    def subtract(self):\n",
    "        self.result=self.first-self.second\n",
    "        return self.result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "bed48349-4460-402a-9490-4a3219208e52",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"gugu.txt\",'w') as f:\n",
    "    for i in range(2,10):\n",
    "        for j in range(1,10):\n",
    "            f.write(f\"{i*j}\")\n",
    "        f.write(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8d926bf-6c45-4041-92e5-1ca1b30332dd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e313da6-6f2d-45b5-82be-18b9066ee907",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28efcec0-10ce-4157-96ff-8b4e69a482f5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efa46e21-5ea5-4737-a6d4-98535cf55acd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1df89c9e-3595-4960-ae0b-3122bb2d8737",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3b0637b-5d2f-45f5-873b-a3d16fa90360",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c36ab5bd-2a80-426a-b2c4-36e29b5e8752",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f5f5806-5b60-48ad-89cb-d9b79afed03c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b01b22f2-2a50-4435-9728-15d145d1c74f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
